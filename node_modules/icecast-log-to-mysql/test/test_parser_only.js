var assert = require('assert');
var fs = require('fs');
var moment = require('moment');

var IcecastToMySQL = require('icecast-log-to-mysql');

describe('IcecastAccessLogToMysqlParser', function() {
    /**
     * @var {IcecastAccessLogToMysqlParser}
     */
    var sender;
    var options;
    var ftpList;
    var remoteFileList;
    var targetFtp;
    var targetFtpName = 'kpradio';

    var failedDownloadList = [];
    var successDownloadList = [];
    var sqlParsedList = [];

    before(function() {
        options = {
            name : 'access.log',
            //name : 'playlist.log',
            logDiffDays: 1,
            date: getYesterday(),
            //date: '2016-01-31',
            retryTimesOnFail: 5,
            retryIntervalOnFail: 10000
        };
        sender = new IcecastToMySQL(options);
    });

    after(function() {
        sender = null;
    });

    it('should read destination ftp list from database', function(done) {
        sender.read_ftp_configs_from_sql_table(function(err, rows) {
            ftpList = rows;
            /*for (var key in ftpList) {
                var ftp = ftpList[key];
                console.log(ftp.id + ":" + ftp.host);
            }*/
            assert.equal(true, ftpList.length > 0, 'Parser returned unexpected results');
            done(err);
        });
    });

    it('should read remote access.log list by date in options', function(done) {
        this.timeout(60000 * 6); // 6 minutes reserved
        for (var i = 0; i < ftpList.length; i++) {
            if (ftpList[i].host.indexOf(targetFtpName) != -1) {
                targetFtp = ftpList[i];
            }
        }
        console.log(targetFtp);
        sender.get_remote_log_files_list(targetFtp, function(err, fileList) {
            remoteFileList = fileList;
            //console.log(err);
            //console.log(fileList);
            assert.equal(true, remoteFileList.length > 0, 'Parser returned unexpected results');
            done(err);
        });
    });


    it('should parse downloaded access*.log and create sql queries', function(done) {
        this.timeout(10 * 60000); // 10  minutes reserved
        console.log(__dirname);
        fs.readdir('downloads', function(err, items) {
            for (var i=0; i<items.length; i++) {
                    var file = __dirname + '/downloads/' + items[i];
                    var item = fs.statSync(file);
                    item.path = file;
                    successDownloadList.push(item);
            }
            console.log(successDownloadList);
            sender.parse_log_files(targetFtp, successDownloadList, function(err, results) { // results as generated sql files
                console.log(err);
                sqlParsedList = results;
                assert.equal(true, results.length > 0, 'Parser returned unexpected results');
                done(err);
            });
        });

//        successDownloadList = getFiles('./downloads');
//        console.log(successDownloadList);

    });


    it('should insert prepared sql queries', function(done) {
        this.timeout(10 * 60000); // 10  minutes reserved
        //console.log(sqlParsedList);
        sender.insert_log_files_to_db(targetFtp, sqlParsedList, function(err, results) {
            console.log(results);
            assert.equal(true, results.length > 0, 'Parser returned unexpected results');
            for (var i = 0; i < results.length; i++) {
                var result = results[i];
                if (result) { // any row to be inserted found
                    if (result.errorList.length > 0) {
                        for (var j = 0; j < result.errorList.length; j++)
                            console.log(result.errorList[j]);
                    }
                    assert.equal(result.rowsInserted, result.linesCount, 'Parser returned unexpected results');
                    assert.equal(0, result.errorList.length, 'Parser returned unexpected results');
                }
            }
            done(err);
        });

    });

});

function getYesterday() {
    return moment().subtract(1, 'day');
}

